CallExpression:  NodePath {
  parent:
   Node {
     type: 'VariableDeclarator',
     start: 405,
     end: 710,
     loc: SourceLocation { start: [Position], end: [Position] },
     id:
      Node {
        type: 'Identifier',
        start: 405,
        end: 409,
        loc: [SourceLocation],
        name: 'Card' },
     init:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        trailingComments: [],
        leadingComments: [],
        innerComments: [] } },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: {},
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'VariableDeclaration',
        start: 399,
        end: 711,
        loc: [SourceLocation],
        declarations: [Array],
        kind: 'var',
        [Symbol(var used to be block scoped)]: true },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 6,
        node: [Node],
        scope: [Scope],
        type: 'VariableDeclaration',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container: [ [Node] ],
     listKey: 'declarations',
     inList: true,
     parentKey: 'declarations',
     key: 0,
     node:
      Node {
        type: 'VariableDeclarator',
        start: 405,
        end: 710,
        loc: [SourceLocation],
        id: [Node],
        init: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'VariableDeclarator',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'declarations',
        inList: true,
        parentKey: 'declarations',
        key: 0,
        node: [Node],
        scope: [Scope],
        type: 'VariableDeclarator',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   Node {
     type: 'VariableDeclarator',
     start: 405,
     end: 710,
     loc: SourceLocation { start: [Position], end: [Position] },
     id:
      Node {
        type: 'Identifier',
        start: 405,
        end: 409,
        loc: [SourceLocation],
        name: 'Card' },
     init:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        trailingComments: [],
        leadingComments: [],
        innerComments: [] } },
  listKey: undefined,
  inList: false,
  parentKey: 'init',
  key: 'init',
  node:
   { type: 'CallExpression',
     callee:
      { type: 'CallExpression', callee: [Object], arguments: [Array] },
     arguments: [ [Object], [Node], [Node], [Node], [Node] ],
     trailingComments: [],
     leadingComments: [],
     innerComments: [] },
  scope:
   Scope {
     uid: 0,
     block:
      Node {
        type: 'Program',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        sourceType: 'module',
        interpreter: null,
        body: [Array],
        directives: [] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Circular],
        type: 'Program',
        typeAnnotation: null },
     labels: Map {},
     references:
      [Object: null prototype] {
        React: true,
        graphql: true,
        createFragmentContainer: true,
        createQueryRendererModern: true,
        UserList_query: true,
        Flex: true,
        alignItems: true,
        flexDirection: true,
        justifyContent: true,
        space: true,
        styled: true,
        fbt: true,
        Card: true,
        UserList: true,
        query: true,
        users: true,
        node: true,
        UserListFragmentContainer: true },
     bindings:
      [Object: null prototype] {
        React: [Binding],
        graphql: [Binding],
        createFragmentContainer: [Binding],
        createQueryRendererModern: [Binding],
        Flex: [Binding],
        alignItems: [Binding],
        flexDirection: [Binding],
        justifyContent: [Binding],
        space: [Binding],
        styled: [Binding],
        UserList: [Binding],
        UserListFragmentContainer: [Binding],
        Card: [Binding] },
     globals:
      [Object: null prototype] {
        Props: [Node],
        query: [Node],
        console: [Object],
        require: [Object] },
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee:
   { type: 'CallExpression',
     callee:
      { type: 'MemberExpression',
        object: [Node],
        property: [Object],
        computed: false,
        optional: null },
     arguments: [ [Object] ] },
  arguments:
   [ { type: 'ArrayExpression', elements: [Array] },
     Node {
       type: 'Identifier',
       start: 647,
       end: 652,
       loc: [SourceLocation],
       name: 'space' },
     Node {
       type: 'Identifier',
       start: 658,
       end: 671,
       loc: [SourceLocation],
       name: 'flexDirection' },
     Node {
       type: 'Identifier',
       start: 677,
       end: 687,
       loc: [SourceLocation],
       name: 'alignItems' },
     Node {
       type: 'Identifier',
       start: 693,
       end: 707,
       loc: [SourceLocation],
       name: 'justifyContent' } ],
  trailingComments: [],
  leadingComments: [],
  innerComments: [] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations: {},
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'CallExpression',
     callee:
      { type: 'CallExpression', callee: [Object], arguments: [Array] },
     arguments: [ [Object], [Node], [Node], [Node], [Node] ],
     trailingComments: [],
     leadingComments: [],
     innerComments: [],
     typeParameters: null },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: {},
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'VariableDeclarator',
        start: 405,
        end: 710,
        loc: [SourceLocation],
        id: [Node],
        init: [Object] },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'declarations',
        inList: true,
        parentKey: 'declarations',
        key: 0,
        node: [Node],
        scope: [Scope],
        type: 'VariableDeclarator',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      Node {
        type: 'VariableDeclarator',
        start: 405,
        end: 710,
        loc: [SourceLocation],
        id: [Node],
        init: [Object] },
     listKey: undefined,
     inList: false,
     parentKey: 'init',
     key: 'init',
     node:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        trailingComments: [],
        leadingComments: [],
        innerComments: [],
        typeParameters: null },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'CallExpression',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'init',
        key: 'init',
        node: [Object],
        scope: [Scope],
        type: 'CallExpression',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   { type: 'CallExpression',
     callee:
      { type: 'CallExpression', callee: [Object], arguments: [Array] },
     arguments: [ [Object], [Node], [Node], [Node], [Node] ],
     trailingComments: [],
     leadingComments: [],
     innerComments: [],
     typeParameters: null },
  listKey: undefined,
  inList: false,
  parentKey: 'callee',
  key: 'callee',
  node:
   { type: 'CallExpression',
     callee:
      { type: 'MemberExpression',
        object: [Node],
        property: [Object],
        computed: false,
        optional: null },
     arguments: [ [Object] ] },
  scope:
   Scope {
     uid: 0,
     block:
      Node {
        type: 'Program',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        sourceType: 'module',
        interpreter: null,
        body: [Array],
        directives: [] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Circular],
        type: 'Program',
        typeAnnotation: null },
     labels: Map {},
     references:
      [Object: null prototype] {
        React: true,
        graphql: true,
        createFragmentContainer: true,
        createQueryRendererModern: true,
        UserList_query: true,
        Flex: true,
        alignItems: true,
        flexDirection: true,
        justifyContent: true,
        space: true,
        styled: true,
        fbt: true,
        Card: true,
        UserList: true,
        query: true,
        users: true,
        node: true,
        UserListFragmentContainer: true },
     bindings:
      [Object: null prototype] {
        React: [Binding],
        graphql: [Binding],
        createFragmentContainer: [Binding],
        createQueryRendererModern: [Binding],
        Flex: [Binding],
        alignItems: [Binding],
        flexDirection: [Binding],
        justifyContent: [Binding],
        space: [Binding],
        styled: [Binding],
        UserList: [Binding],
        UserListFragmentContainer: [Binding],
        Card: [Binding] },
     globals:
      [Object: null prototype] {
        Props: [Node],
        query: [Node],
        console: [Object],
        require: [Object] },
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee:
   { type: 'MemberExpression',
     object:
      Node {
        type: 'MemberExpression',
        start: 412,
        end: 420,
        loc: [SourceLocation],
        object: [Node],
        property: [Node],
        computed: false },
     property: { type: 'Identifier', name: 'withConfig' },
     computed: false,
     optional: null },
  arguments: [ { type: 'ObjectExpression', properties: [Array] } ] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations: {},
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'VariableDeclarator',
     id:
      Node {
        type: 'Identifier',
        start: 761,
        end: 769,
        loc: [SourceLocation],
        name: 'UserList' },
     init:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        trailingComments: [],
        leadingComments: [Array],
        innerComments: [] } },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: [Object],
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      { type: 'VariableDeclaration',
        kind: 'var',
        declarations: [Array],
        trailingComments: [],
        leadingComments: [],
        innerComments: [],
        [Symbol(var used to be block scoped)]: true },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 15,
        node: [Object],
        scope: [Scope],
        type: 'VariableDeclaration',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container: [ [Object] ],
     listKey: 'declarations',
     inList: true,
     parentKey: 'declarations',
     key: 0,
     node: { type: 'VariableDeclarator', id: [Node], init: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false },
     type: 'VariableDeclarator',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'declarations',
        inList: true,
        parentKey: 'declarations',
        key: 0,
        node: [Object],
        scope: [Scope],
        type: 'VariableDeclarator',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   { type: 'VariableDeclarator',
     id:
      Node {
        type: 'Identifier',
        start: 761,
        end: 769,
        loc: [SourceLocation],
        name: 'UserList' },
     init:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        trailingComments: [],
        leadingComments: [Array],
        innerComments: [] } },
  listKey: undefined,
  inList: false,
  parentKey: 'init',
  key: 'init',
  node:
   { type: 'CallExpression',
     callee:
      { type: 'FunctionExpression',
        params: [Array],
        body: [Object],
        async: false },
     arguments: [ [Object] ],
     trailingComments: [],
     leadingComments: [ [Object] ],
     innerComments: [] },
  scope:
   Scope {
     uid: 0,
     block:
      Node {
        type: 'Program',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        sourceType: 'module',
        interpreter: null,
        body: [Array],
        directives: [] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Circular],
        type: 'Program',
        typeAnnotation: null },
     labels: Map {},
     references:
      [Object: null prototype] {
        React: true,
        graphql: true,
        createFragmentContainer: true,
        createQueryRendererModern: true,
        UserList_query: true,
        Flex: true,
        alignItems: true,
        flexDirection: true,
        justifyContent: true,
        space: true,
        styled: true,
        fbt: true,
        Card: true,
        UserList: true,
        query: true,
        users: true,
        node: true,
        UserListFragmentContainer: true,
        key: true,
        code: true,
        '_React$Component': true,
        _inherits: true,
        _setPrototypeOf: true,
        o: true,
        p: true,
        subClass: true,
        superClass: true,
        render: true,
        __reactstandin__regenerateByEval: true,
        _getPrototypeOf: true,
        _possibleConstructorReturn: true,
        _assertThisInitialized: true,
        self: true,
        call: true,
        _createClass: true,
        target: true,
        props: true,
        i: true,
        descriptor: true,
        Constructor: true,
        protoProps: true,
        staticProps: true,
        _classCallCheck: true,
        instance: true },
     bindings:
      [Object: null prototype] {
        React: [Binding],
        graphql: [Binding],
        createFragmentContainer: [Binding],
        createQueryRendererModern: [Binding],
        Flex: [Binding],
        alignItems: [Binding],
        flexDirection: [Binding],
        justifyContent: [Binding],
        space: [Binding],
        styled: [Binding],
        UserListFragmentContainer: [Binding],
        Card: [Binding],
        UserList: [Binding] },
     globals:
      [Object: null prototype] {
        Props: [Node],
        query: [Node],
        console: [Object],
        require: [Object],
        eval: [Object],
        arguments: [Object],
        _setPrototypeOf: [Object],
        Object: [Object],
        TypeError: [Object],
        _getPrototypeOf: [Object],
        ReferenceError: [Object],
        _assertThisInitialized: [Object],
        _defineProperties: [Object],
        _classCallCheck: [Object],
        _possibleConstructorReturn: [Object],
        _inherits: [Object],
        _createClass: [Object] },
     uids:
      [Object: null prototype] {
        '_React$Component': true,
        _inherits: true,
        _setPrototypeOf: true,
        _getPrototypeOf: true,
        _possibleConstructorReturn: true,
        _assertThisInitialized: true,
        _createClass: true,
        _classCallCheck: true },
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee:
   { type: 'FunctionExpression',
     params: [ [Object] ],
     body: { type: 'BlockStatement', body: [Array], directives: [] },
     async: false },
  arguments:
   [ { type: 'MemberExpression',
       object: [Object],
       property: [Object],
       computed: false,
       loc: [SourceLocation] } ],
  trailingComments: [],
  leadingComments: [ { type: 'CommentBlock', value: '#__PURE__' } ],
  innerComments: [] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations:
      { inherits: [Object],
        setPrototypeOf: [Object],
        getPrototypeOf: [Object],
        possibleConstructorReturn: [Object],
        assertThisInitialized: [Object],
        createClass: [Object],
        classCallCheck: [Object] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'ExpressionStatement',
     expression:
      { type: 'CallExpression', callee: [Object], arguments: [Array] } },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: [Object],
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent: { type: 'BlockStatement', body: [Array], directives: [] },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Object],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container: [ [Object], [Object], [Object], [Object] ],
     listKey: 'body',
     inList: true,
     parentKey: 'body',
     key: 0,
     node: { type: 'ExpressionStatement', expression: [Object] },
     scope:
      Scope {
        uid: 72,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object],
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'ExpressionStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 0,
        node: [Object],
        scope: [Scope],
        type: 'ExpressionStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 72,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object],
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   { type: 'ExpressionStatement',
     expression:
      { type: 'CallExpression', callee: [Object], arguments: [Array] } },
  listKey: undefined,
  inList: false,
  parentKey: 'expression',
  key: 'expression',
  node:
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: '_inherits' },
     arguments: [ [Object], [Object] ] },
  scope:
   Scope {
     uid: 72,
     block:
      { type: 'FunctionExpression',
        params: [Array],
        body: [Object],
        async: false },
     path:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'callee',
        key: 'callee',
        node: [Object],
        scope: [Circular],
        type: 'FunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: [Object: null prototype] {},
     bindings:
      [Object: null prototype] { '_React$Component': [Binding], UserList: [Binding] },
     globals: [Object: null prototype] {},
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee: { type: 'Identifier', name: '_inherits' },
  arguments:
   [ { type: 'Identifier', name: 'UserList' },
     { type: 'Identifier', name: '_React$Component' } ] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations:
      { inherits: [Object],
        setPrototypeOf: [Object],
        getPrototypeOf: [Object],
        possibleConstructorReturn: [Object],
        assertThisInitialized: [Object],
        createClass: [Object],
        classCallCheck: [Object] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'ExpressionStatement',
     expression:
      { type: 'CallExpression', callee: [Object], arguments: [Array] } },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: [Object],
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      { type: 'BlockStatement',
        body: [Array],
        directives: [],
        typeAnnotation: undefined,
        typeParameters: undefined,
        returnType: undefined,
        start: undefined,
        loc: undefined,
        end: undefined,
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Object],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container: [ [Object], [Object] ],
     listKey: 'body',
     inList: true,
     parentKey: 'body',
     key: 0,
     node: { type: 'ExpressionStatement', expression: [Object] },
     scope:
      Scope {
        uid: 73,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'ExpressionStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 0,
        node: [Object],
        scope: [Scope],
        type: 'ExpressionStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 73,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   { type: 'ExpressionStatement',
     expression:
      { type: 'CallExpression', callee: [Object], arguments: [Array] } },
  listKey: undefined,
  inList: false,
  parentKey: 'expression',
  key: 'expression',
  node:
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: '_classCallCheck' },
     arguments: [ [Object], [Object] ] },
  scope:
   Scope {
     uid: 73,
     block:
      { type: 'FunctionDeclaration',
        id: [Object],
        params: [],
        body: [Object],
        generator: false,
        async: false,
        typeAnnotation: undefined,
        typeParameters: undefined,
        returnType: undefined,
        start: undefined,
        loc: undefined,
        end: undefined,
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     path:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 1,
        node: [Object],
        scope: [Circular],
        type: 'FunctionDeclaration',
        typeAnnotation: null },
     labels: Map {},
     references: [Object: null prototype] {},
     bindings: [Object: null prototype] {},
     globals: [Object: null prototype] {},
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee: { type: 'Identifier', name: '_classCallCheck' },
  arguments:
   [ { type: 'ThisExpression' },
     { type: 'Identifier', name: 'UserList' } ] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations:
      { inherits: [Object],
        setPrototypeOf: [Object],
        getPrototypeOf: [Object],
        possibleConstructorReturn: [Object],
        assertThisInitialized: [Object],
        createClass: [Object],
        classCallCheck: [Object] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'ReturnStatement',
     argument:
      { type: 'CallExpression', callee: [Object], arguments: [Array] },
     trailingComments: [],
     leadingComments: [],
     innerComments: [] },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: [Object],
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      { type: 'BlockStatement',
        body: [Array],
        directives: [],
        typeAnnotation: undefined,
        typeParameters: undefined,
        returnType: undefined,
        start: undefined,
        loc: undefined,
        end: undefined,
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Object],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container: [ [Object], [Object] ],
     listKey: 'body',
     inList: true,
     parentKey: 'body',
     key: 1,
     node:
      { type: 'ReturnStatement',
        argument: [Object],
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     scope:
      Scope {
        uid: 73,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'ReturnStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 1,
        node: [Object],
        scope: [Scope],
        type: 'ReturnStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 73,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   { type: 'ReturnStatement',
     argument:
      { type: 'CallExpression', callee: [Object], arguments: [Array] },
     trailingComments: [],
     leadingComments: [],
     innerComments: [] },
  listKey: undefined,
  inList: false,
  parentKey: 'argument',
  key: 'argument',
  node:
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: '_possibleConstructorReturn' },
     arguments: [ [Object], [Object] ] },
  scope:
   Scope {
     uid: 73,
     block:
      { type: 'FunctionDeclaration',
        id: [Object],
        params: [],
        body: [Object],
        generator: false,
        async: false,
        typeAnnotation: undefined,
        typeParameters: undefined,
        returnType: undefined,
        start: undefined,
        loc: undefined,
        end: undefined,
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     path:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 1,
        node: [Object],
        scope: [Circular],
        type: 'FunctionDeclaration',
        typeAnnotation: null },
     labels: Map {},
     references: [Object: null prototype] {},
     bindings: [Object: null prototype] {},
     globals: [Object: null prototype] {},
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee: { type: 'Identifier', name: '_possibleConstructorReturn' },
  arguments:
   [ { type: 'ThisExpression' },
     { type: 'CallExpression', callee: [Object], arguments: [Array] } ] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations:
      { inherits: [Object],
        setPrototypeOf: [Object],
        getPrototypeOf: [Object],
        possibleConstructorReturn: [Object],
        assertThisInitialized: [Object],
        createClass: [Object],
        classCallCheck: [Object] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: '_possibleConstructorReturn' },
     arguments: [ [Object], [Object] ],
     typeParameters: null },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: [Object],
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      { type: 'ReturnStatement',
        argument: [Object],
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 1,
        node: [Object],
        scope: [Scope],
        type: 'ReturnStatement',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      { type: 'ReturnStatement',
        argument: [Object],
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     listKey: undefined,
     inList: false,
     parentKey: 'argument',
     key: 'argument',
     node:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        typeParameters: null },
     scope:
      Scope {
        uid: 73,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'CallExpression',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'argument',
        key: 'argument',
        node: [Object],
        scope: [Scope],
        type: 'CallExpression',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 73,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   [ { type: 'ThisExpression' },
     { type: 'CallExpression', callee: [Object], arguments: [Array] } ],
  listKey: 'arguments',
  inList: true,
  parentKey: 'arguments',
  key: 1,
  node:
   { type: 'CallExpression',
     callee:
      { type: 'MemberExpression',
        object: [Object],
        property: [Object],
        computed: false,
        optional: null },
     arguments: [ [Object], [Object] ] },
  scope:
   Scope {
     uid: 73,
     block:
      { type: 'FunctionDeclaration',
        id: [Object],
        params: [],
        body: [Object],
        generator: false,
        async: false,
        typeAnnotation: undefined,
        typeParameters: undefined,
        returnType: undefined,
        start: undefined,
        loc: undefined,
        end: undefined,
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     path:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 1,
        node: [Object],
        scope: [Circular],
        type: 'FunctionDeclaration',
        typeAnnotation: null },
     labels: Map {},
     references: [Object: null prototype] {},
     bindings: [Object: null prototype] {},
     globals: [Object: null prototype] {},
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee:
   { type: 'MemberExpression',
     object:
      { type: 'CallExpression', callee: [Object], arguments: [Array] },
     property: { type: 'Identifier', name: 'apply' },
     computed: false,
     optional: null },
  arguments:
   [ { type: 'ThisExpression' },
     { type: 'Identifier', name: 'arguments', loc: undefined } ] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations:
      { inherits: [Object],
        setPrototypeOf: [Object],
        getPrototypeOf: [Object],
        possibleConstructorReturn: [Object],
        assertThisInitialized: [Object],
        createClass: [Object],
        classCallCheck: [Object] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'MemberExpression',
     object:
      { type: 'CallExpression', callee: [Object], arguments: [Array] },
     property: { type: 'Identifier', name: 'apply' },
     computed: false,
     optional: null },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: [Object],
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        typeParameters: null },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'arguments',
        inList: true,
        parentKey: 'arguments',
        key: 1,
        node: [Object],
        scope: [Scope],
        type: 'CallExpression',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        typeParameters: null },
     listKey: undefined,
     inList: false,
     parentKey: 'callee',
     key: 'callee',
     node:
      { type: 'MemberExpression',
        object: [Object],
        property: [Object],
        computed: false,
        optional: null },
     scope:
      Scope {
        uid: 73,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'MemberExpression',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'callee',
        key: 'callee',
        node: [Object],
        scope: [Scope],
        type: 'MemberExpression',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 73,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object: null prototype] {},
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   { type: 'MemberExpression',
     object:
      { type: 'CallExpression', callee: [Object], arguments: [Array] },
     property: { type: 'Identifier', name: 'apply' },
     computed: false,
     optional: null },
  listKey: undefined,
  inList: false,
  parentKey: 'object',
  key: 'object',
  node:
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: '_getPrototypeOf' },
     arguments: [ [Object] ] },
  scope:
   Scope {
     uid: 73,
     block:
      { type: 'FunctionDeclaration',
        id: [Object],
        params: [],
        body: [Object],
        generator: false,
        async: false,
        typeAnnotation: undefined,
        typeParameters: undefined,
        returnType: undefined,
        start: undefined,
        loc: undefined,
        end: undefined,
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     path:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 1,
        node: [Object],
        scope: [Circular],
        type: 'FunctionDeclaration',
        typeAnnotation: null },
     labels: Map {},
     references: [Object: null prototype] {},
     bindings: [Object: null prototype] {},
     globals: [Object: null prototype] {},
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee: { type: 'Identifier', name: '_getPrototypeOf' },
  arguments: [ { type: 'Identifier', name: 'UserList' } ] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations:
      { inherits: [Object],
        setPrototypeOf: [Object],
        getPrototypeOf: [Object],
        possibleConstructorReturn: [Object],
        assertThisInitialized: [Object],
        createClass: [Object],
        classCallCheck: [Object] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'ExpressionStatement',
     expression:
      { type: 'CallExpression', callee: [Object], arguments: [Array] } },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: [Object],
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent: { type: 'BlockStatement', body: [Array], directives: [] },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'body',
        key: 'body',
        node: [Object],
        scope: [Scope],
        type: 'BlockStatement',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container: [ [Object], [Object], [Object], [Object] ],
     listKey: 'body',
     inList: true,
     parentKey: 'body',
     key: 2,
     node: { type: 'ExpressionStatement', expression: [Object] },
     scope:
      Scope {
        uid: 72,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object],
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'ExpressionStatement',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'body',
        inList: true,
        parentKey: 'body',
        key: 2,
        node: [Object],
        scope: [Scope],
        type: 'ExpressionStatement',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 72,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object],
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   { type: 'ExpressionStatement',
     expression:
      { type: 'CallExpression', callee: [Object], arguments: [Array] } },
  listKey: undefined,
  inList: false,
  parentKey: 'expression',
  key: 'expression',
  node:
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: '_createClass' },
     arguments: [ [Object], [Object] ] },
  scope:
   Scope {
     uid: 72,
     block:
      { type: 'FunctionExpression',
        params: [Array],
        body: [Object],
        async: false },
     path:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'callee',
        key: 'callee',
        node: [Object],
        scope: [Circular],
        type: 'FunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: [Object: null prototype] {},
     bindings:
      [Object: null prototype] { '_React$Component': [Binding], UserList: [Binding] },
     globals: [Object: null prototype] {},
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee: { type: 'Identifier', name: '_createClass' },
  arguments:
   [ { type: 'Identifier', name: 'UserList' },
     { type: 'ArrayExpression', elements: [Array] } ] } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations:
      { inherits: [Object],
        setPrototypeOf: [Object],
        getPrototypeOf: [Object],
        possibleConstructorReturn: [Object],
        assertThisInitialized: [Object],
        createClass: [Object],
        classCallCheck: [Object] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
CallExpression:  NodePath {
  parent:
   { type: 'JSXExpressionContainer',
     expression:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        loc: [SourceLocation] },
     loc: SourceLocation { start: [Position], end: [Position] },
     trailingComments: [],
     leadingComments: [],
     innerComments: [] },
  hub:
   { file:
      File {
        _map: [Map],
        declarations: [Object],
        path: [NodePath],
        ast: [Node],
        metadata: {},
        code:
         'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
        inputMap: null,
        hub: [Circular],
        opts: [Object],
        scope: [Scope] },
     getCode: [Function: getCode],
     getScope: [Function: getScope],
     addHelper: [Function: bound addHelper],
     buildError: [Function: bound buildCodeFrameError] },
  contexts:
   [ TraversalContext {
       queue: [Array],
       parentPath: [NodePath],
       scope: [Scope],
       state: undefined,
       opts: [Object],
       priorityQueue: [] } ],
  data: {},
  shouldSkip: false,
  shouldStop: false,
  removed: false,
  state: undefined,
  opts:
   { ExportDefaultDeclaration: { enter: [Array] },
     Program: { enter: [Array], exit: [Array] },
     _exploded: {},
     _verified: {},
     ClassDeclaration: { enter: [Array] },
     ClassExpression: { enter: [Array] },
     JSXAttribute: { enter: [Array] },
     CallExpression: { enter: [Array] },
     TaggedTemplateExpression: { enter: [Array] },
     VariableDeclarator: { enter: [Array] },
     ExportNamedDeclaration: { enter: [Array] },
     CatchClause: { enter: [Array] },
     AssignmentExpression: { enter: [Array] },
     ObjectExpression: { enter: [Array], exit: [Array] },
     FunctionDeclaration: { enter: [Array], exit: [Array] },
     FunctionExpression: { enter: [Array], exit: [Array] },
     ObjectMethod: { enter: [Array], exit: [Array] },
     ArrowFunctionExpression: { enter: [Array], exit: [Array] },
     ClassMethod: { enter: [Array], exit: [Array] },
     ClassPrivateMethod: { enter: [Array], exit: [Array] },
     ForInStatement: { enter: [Array] },
     ForOfStatement: { enter: [Array] },
     PrivateName: { enter: [Array] },
     JSXElement: { enter: [Array], exit: [Array] },
     Identifier: { enter: [Array] },
     RestElement: { enter: [Array] },
     TSDeclareFunction: { enter: [Array] },
     TSDeclareMethod: { enter: [Array] },
     VariableDeclaration: { enter: [Array] },
     ClassProperty: { enter: [Array] },
     TSIndexSignature: { enter: [Array] },
     TSModuleDeclaration: { enter: [Array] },
     TSInterfaceDeclaration: { enter: [Array] },
     TSTypeAliasDeclaration: { enter: [Array] },
     TSEnumDeclaration: { enter: [Array] },
     TSImportEqualsDeclaration: { enter: [Array] },
     TSExportAssignment: { enter: [Array] },
     TSTypeAssertion: { enter: [Array] },
     TSAsExpression: { enter: [Array] },
     TSNonNullExpression: { enter: [Array] },
     NewExpression: { enter: [Array] },
     JSXOpeningElement: { enter: [Array] },
     AssignmentPattern: { enter: [Array] },
     ArrayPattern: { enter: [Array] },
     ObjectPattern: { enter: [Array] },
     TemplateLiteral: { enter: [Array] },
     NumericLiteral: { enter: [Array] },
     StringLiteral: { enter: [Array] },
     ObjectProperty: { enter: [Array] },
     BlockStatement: { enter: [Array], exit: [Array] },
     SwitchCase: { enter: [Array] },
     RegExpLiteral: { enter: [Array] },
     ArrayExpression: { enter: [Array] },
     SwitchStatement: { enter: [Array] },
     DoWhileStatement: { enter: [Array] },
     ForStatement: { enter: [Array] },
     WhileStatement: { enter: [Array] },
     UnaryExpression: { enter: [Array] },
     MetaProperty: { enter: [Array] },
     BinaryExpression: { enter: [Array] },
     DirectiveLiteral: { enter: [Array] },
     JSXNamespacedName: { enter: [Array] },
     JSXFragment: { exit: [Array] } },
  skipKeys: {},
  parentPath:
   NodePath {
     parent:
      Node {
        type: 'JSXElement',
        start: 937,
        end: 1029,
        loc: [SourceLocation],
        openingElement: [Node],
        closingElement: [Node],
        children: [Array] },
     hub:
      { file: [File],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     contexts: [ [TraversalContext] ],
     data: {},
     shouldSkip: false,
     shouldStop: false,
     removed: false,
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     skipKeys: {},
     parentPath:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'children',
        inList: true,
        parentKey: 'children',
        key: 1,
        node: [Node],
        scope: [Scope],
        type: 'JSXElement',
        typeAnnotation: null },
     context:
      TraversalContext {
        queue: [Array],
        parentPath: [NodePath],
        scope: [Scope],
        state: undefined,
        opts: [Object],
        priorityQueue: [] },
     container: [ [Node], [Object], [Node] ],
     listKey: 'children',
     inList: true,
     parentKey: 'children',
     key: 1,
     node:
      { type: 'JSXExpressionContainer',
        expression: [Object],
        loc: [SourceLocation],
        trailingComments: [],
        leadingComments: [],
        innerComments: [] },
     scope:
      Scope {
        uid: 74,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object],
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     type: 'JSXExpressionContainer',
     typeAnnotation: null },
  context:
   TraversalContext {
     queue: [ [Circular] ],
     parentPath:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Array],
        listKey: 'children',
        inList: true,
        parentKey: 'children',
        key: 1,
        node: [Object],
        scope: [Scope],
        type: 'JSXExpressionContainer',
        typeAnnotation: null },
     scope:
      Scope {
        uid: 74,
        block: [Object],
        path: [NodePath],
        labels: Map {},
        references: [Object: null prototype] {},
        bindings: [Object],
        globals: [Object: null prototype] {},
        uids: [Object: null prototype] {},
        data: [Object: null prototype] {},
        crawling: false },
     state: undefined,
     opts:
      { ExportDefaultDeclaration: [Object],
        Program: [Object],
        _exploded: {},
        _verified: {},
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        JSXAttribute: [Object],
        CallExpression: [Object],
        TaggedTemplateExpression: [Object],
        VariableDeclarator: [Object],
        ExportNamedDeclaration: [Object],
        CatchClause: [Object],
        AssignmentExpression: [Object],
        ObjectExpression: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        ObjectMethod: [Object],
        ArrowFunctionExpression: [Object],
        ClassMethod: [Object],
        ClassPrivateMethod: [Object],
        ForInStatement: [Object],
        ForOfStatement: [Object],
        PrivateName: [Object],
        JSXElement: [Object],
        Identifier: [Object],
        RestElement: [Object],
        TSDeclareFunction: [Object],
        TSDeclareMethod: [Object],
        VariableDeclaration: [Object],
        ClassProperty: [Object],
        TSIndexSignature: [Object],
        TSModuleDeclaration: [Object],
        TSInterfaceDeclaration: [Object],
        TSTypeAliasDeclaration: [Object],
        TSEnumDeclaration: [Object],
        TSImportEqualsDeclaration: [Object],
        TSExportAssignment: [Object],
        TSTypeAssertion: [Object],
        TSAsExpression: [Object],
        TSNonNullExpression: [Object],
        NewExpression: [Object],
        JSXOpeningElement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ObjectPattern: [Object],
        TemplateLiteral: [Object],
        NumericLiteral: [Object],
        StringLiteral: [Object],
        ObjectProperty: [Object],
        BlockStatement: [Object],
        SwitchCase: [Object],
        RegExpLiteral: [Object],
        ArrayExpression: [Object],
        SwitchStatement: [Object],
        DoWhileStatement: [Object],
        ForStatement: [Object],
        WhileStatement: [Object],
        UnaryExpression: [Object],
        MetaProperty: [Object],
        BinaryExpression: [Object],
        DirectiveLiteral: [Object],
        JSXNamespacedName: [Object],
        JSXFragment: [Object] },
     priorityQueue: [] },
  container:
   { type: 'JSXExpressionContainer',
     expression:
      { type: 'CallExpression',
        callee: [Object],
        arguments: [Array],
        loc: [SourceLocation] },
     loc: SourceLocation { start: [Position], end: [Position] },
     trailingComments: [],
     leadingComments: [],
     innerComments: [] },
  listKey: undefined,
  inList: false,
  parentKey: 'expression',
  key: 'expression',
  node:
   { type: 'CallExpression',
     callee: { type: 'Identifier', name: 'fbt' },
     arguments: [ [Object], [Node] ],
     loc: SourceLocation { start: [Position], end: [Position] } },
  scope:
   Scope {
     uid: 74,
     block:
      { type: 'FunctionExpression',
        id: [Object],
        params: [],
        body: [Node],
        generator: false,
        async: false,
        returnType: undefined,
        trailingComments: null,
        leadingComments: null,
        innerComments: null },
     path:
      NodePath {
        parent: [Object],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: [NodePath],
        context: [TraversalContext],
        container: [Object],
        listKey: undefined,
        inList: false,
        parentKey: 'value',
        key: 'value',
        node: [Object],
        scope: [Circular],
        type: 'FunctionExpression',
        typeAnnotation: null },
     labels: Map {},
     references: [Object: null prototype] {},
     bindings:
      [Object: null prototype] { query: [Binding], users: [Binding] },
     globals: [Object: null prototype] {},
     uids: [Object: null prototype] {},
     data: [Object: null prototype] {},
     crawling: false },
  type: 'CallExpression',
  typeAnnotation: null } { type: 'CallExpression',
  callee: { type: 'Identifier', name: 'fbt' },
  arguments:
   [ { type: 'StringLiteral', value: ' Usuários ' },
     Node {
       type: 'StringLiteral',
       start: 964,
       end: 974,
       loc: [SourceLocation],
       extra: [Object],
       value: 'Usuários' } ],
  loc:
   SourceLocation {
     start: Position { line: 37, column: 10 },
     end: Position { line: 39, column: 16 } } } PluginPass {
  _map: Map {},
  key: 'fbt',
  file:
   File {
     _map:
      Map {
        '@babel/plugin-class-features/featuresKey' => 2,
        '@babel/plugin-class-features/version' => 70000200002,
        'styled-components-file-hash' => '1uc7hyr',
        'styled-components-component-position' => 1 },
     declarations:
      { inherits: [Object],
        setPrototypeOf: [Object],
        getPrototypeOf: [Object],
        possibleConstructorReturn: [Object],
        assertThisInitialized: [Object],
        createClass: [Object],
        classCallCheck: [Object] },
     path:
      NodePath {
        parent: [Node],
        hub: [Object],
        contexts: [Array],
        data: {},
        shouldSkip: false,
        shouldStop: false,
        removed: false,
        state: undefined,
        opts: [Object],
        skipKeys: {},
        parentPath: null,
        context: [TraversalContext],
        container: [Node],
        listKey: undefined,
        inList: false,
        parentKey: 'program',
        key: 'program',
        node: [Node],
        scope: [Scope],
        type: 'Program',
        typeAnnotation: null },
     ast:
      Node {
        type: 'File',
        start: 0,
        end: 1735,
        loc: [SourceLocation],
        program: [Node],
        comments: [] },
     metadata: {},
     code:
      'import * as React from \'react\';\nimport { graphql, createFragmentContainer } from \'react-relay\';\nimport { createQueryRendererModern } from \'./relay\';\nimport { UserList_query } from \'./__generated__/UserList_query.graphql\';\nimport { Flex } from \'rebass\';\nimport { alignItems, flexDirection, justifyContent, space } from \'styled-system\';\nimport styled from \'styled-components\';\nimport fbt from \'fbt\';\n\nconst Card = styled.a`\n  border-radius: 2px;\n  display: flex;\n  max-width: 265px;\n  width: 200px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 5px 0 #dfdfdf, 0 1px 5px 0 #dfdfdf;\n  flex-direction: column;\n  cursor: pointer;\n  margin: 10px;\n  ${space}\n  ${flexDirection}\n  ${alignItems}\n  ${justifyContent}\n`;\n\ntype Props = {\n  query:  UserList_query\n}\nclass UserList extends React.Component<Props> {\n  render() {\n    const { query } = this.props;\n    const { users } = query;\n\n    return (\n      <Flex flexDirection=\'column\'>\n        <span>\n          <fbt desc="Usuários">\n            Usuários\n          </fbt>\n        </span>\n        {users.edges.map(({node}) => (\n          <Card key={node.id}>\n            <span>User: {node.name}</span>\n            <span>Email: {node.name}</span>\n          </Card>\n        ))}\n      </Flex>\n    )\n  }\n}\n\nconst UserListFragmentContainer = createFragmentContainer(UserList, {\n  query: graphql`\n    fragment UserList_query on Query {\n      users(first: 10) @connection(key: "UserList_users", filters: []) {\n        edges {\n          node {\n            id\n            name\n            email\n          }\n        }\n      }\n    }\n  `\n});\n\nexport default createQueryRendererModern(UserListFragmentContainer, UserList, {\n  query: graphql`\n    query UserListQuery {\n      ...UserList_query\n    }\n  `,\n});\n',
     inputMap: null,
     hub:
      { file: [Circular],
        getCode: [Function: getCode],
        getScope: [Function: getScope],
        addHelper: [Function: bound addHelper],
        buildError: [Function: bound buildCodeFrameError] },
     opts:
      { ast: false,
        code: false,
        sourceType: 'unambiguous',
        filename:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx',
        babelrc: false,
        configFile: false,
        passPerPreset: false,
        envName: 'development',
        cwd:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        root:
         '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
        plugins: [Array],
        presets: [],
        parserOpts: [Object],
        generatorOpts: [Object] },
     scope:
      Scope {
        uid: 0,
        block: [Node],
        path: [NodePath],
        labels: Map {},
        references: [Object],
        bindings: [Object],
        globals: [Object],
        uids: [Object],
        data: [Object: null prototype] {},
        crawling: false } },
  opts:
   { collectFbt: true,
     sourceType: 'nonStrictModule',
     filepath: 'src/UserList.tsx',
     extraOptions: {},
     fbtEnumManifest: {},
     auxiliaryTexts: false,
     reactNativeMode: false,
     fbtSentinel: '__FBT__',
     fbtBase64: undefined },
  cwd:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web',
  filename:
   '/Users/sibelius/Dev/entria/feedback/entria-fullstack/packages/web/src/UserList.tsx' } fbt
{
 "phrases": [],
 "childParentMappings": {}
}
